using System;

class FinancialForecast
{
    public static double FutureValue(double principal, double rate, int years)
    {
        if (years == 0) return principal;
        return FutureValue(principal, rate, years - 1) * (1 + rate);
    }

    static void Main(string[] args)
    {
        double principal = 10000;
        double growthRate = 0.05;
        int periods = 5;

        double result = FutureValue(principal, growthRate, periods);
        Console.WriteLine($"Future Value after {periods} years: {result:F2}");
    }
}

Recursion is a technique where a function calls itself to solve smaller instances of the same problem. It breaks complex tasks into simpler subproblems, making code more intuitive and elegant for scenarios like tree traversal, factorials, or computing Fibonacci numbers. The key is defining a **base case** to avoid infinite loops.

It shines especially when the problem has a naturally recursive structureâ€”such as navigating directories or evaluating expressions. 



-Time Complexity of the Recursive Algorithm
The time complexity of the recursive `futureValue(principal, rate, years)` method is O(n), where `n` is the number of years. 
This is because the method makes a single recursive call per year, resulting in a linear number of calls.

-Optimization Techniques

1. Iteration Over Recursion: Replace recursive calls with a loop to prevent stack buildup and improve space efficiency to **O(1)**.
2. Memoization: Store results of previous computations in memory to avoid redundant calculations, especially useful for overlapping subproblems.
3. Tail Recursion: Where supported, structuring recursion in a tail-optimized form allows some compilers to transform it into iterative code internally.

These approaches enhance performance and prevent stack overflow in deeper recursive calls. 
